#!/bin/sh

function fixperms(){
  find . \( -name "*.sh" -or -type d \) -exec chmod 755 {} \; && find . -type f ! -name "*.sh" -exec chmod 644 {} \;
}

function showdf() {
  defaults write com.apple.Finder AppleShowAllFiles YES
  osascript -e 'tell application "Finder" to quit'
  sleep 0.25
  osascript -e 'tell application "Finder" to activate'
}

function hidedf() {
  defaults write com.apple.Finder AppleShowAllFiles NO
  osascript -e 'tell application "Finder" to quit'
  sleep 0.25
  osascript -e 'tell application "Finder" to activate'
}

init_ipykernel () {
  echo "Setting up pipenv environment"
  echo "Installing ipython kernel"
  pipenv install --dev ipykernel
  # get name of environment and remove checksum for pretty name
  venv_name=$(basename -- $(pipenv --venv))
  venv_prettyname=$(echo $venv_name | cut -d '-' -f 1)
  echo "Adding ipython kernel to list of jupyter kernels"
  $(pipenv --py) -m ipykernel install --name $venv_name \
  --display-name "Python3 ($venv_prettyname)"
}

# https://github.com/nix-community/nix-direnv/wiki/Shell-integration
nixify() {
  if [ ! -e ./.envrc ]; then
    echo "use nix" > .envrc
    direnv allow
  fi
  if [[ ! -e shell.nix ]] && [[ ! -e default.nix ]]; then
    cat > default.nix <<'EOF'
with import <nixpkgs> {};
mkShell {
  nativeBuildInputs = [
    bashInteractive
  ];
}
EOF
    ${EDITOR:-vim} default.nix
  fi
}

flakify() {
  if [ ! -e flake.nix ]; then
    nix flake new -t github:nix-community/nix-direnv .
  elif [ ! -e .envrc ]; then
    echo "use flake" > .envrc
    direnv allow
  fi
  ${EDITOR:-vim} flake.nix
}
